---
export interface Props {
  sections: Array<{ id: string; title: string }>;
}
const { sections }: Props = Astro.props;
---

<div class="fixed right-8 top-1/2 transform -translate-y-1/2 z-50 hidden lg:block">
  <nav class="flex flex-col gap-4">
    {sections.map((section, index) => (
      <button
        class="scroll-indicator-dot group relative flowing-element"
        data-section={section.id}
        aria-label={`Jump to ${section.title}`}
      >
        <!-- 主要指示点 -->
        <div class="w-4 h-4 rounded-full bg-slate-300/60 transition-all duration-500 group-hover:bg-blue-500 group-hover:scale-125 shadow-layer-2 group-hover:shadow-layer-3 relative">
          <!-- 悬停时的光晕效果 -->
          <div class="absolute inset-0 rounded-full bg-blue-400 opacity-0 group-hover:opacity-20 blur-sm transition-opacity duration-500"></div>
        </div>
        
        <!-- 装饰性连接线 -->
        <div class="absolute right-5 top-1/2 transform -translate-y-1/2 w-0.5 h-0 bg-blue-300 opacity-0 group-hover:opacity-100 group-hover:h-4 transition-all duration-500 origin-top"></div>
        
        <!-- 标签提示 -->
        <span class="absolute right-8 top-1/2 transform -translate-y-1/2 bg-slate-800/90 text-white text-sm px-3 py-2 rounded-xl opacity-0 group-hover:opacity-100 transition-all duration-500 whitespace-nowrap shadow-layer-3 backdrop-blur-sm border border-slate-700/50">
          {section.title}
          <!-- 标签箭头 -->
          <div class="absolute left-0 top-1/2 transform -translate-y-1/2 w-2 h-2 bg-slate-800/90 rotate-45 border-l border-b border-slate-700/50"></div>
        </span>
        
        <!-- 新增：浮动装饰元素 -->
        <div class="absolute -top-1 -right-1 w-2 h-2 bg-blue-400 rounded-full opacity-0 group-hover:opacity-60 transform scale-0 group-hover:scale-100 transition-all duration-500"></div>
      </button>
    ))}
  </nav>
  
  <!-- 新增：滚动提示 -->
  <div class="mt-8 text-center">
    <div class="text-xs text-slate-500 font-medium opacity-60 hover:opacity-100 transition-opacity duration-300">
      Navigation
    </div>
  </div>
</div>

<script>
  // 增强的滚动指示器功能
  const sections = document.querySelectorAll('.section');
  const dots = document.querySelectorAll('.scroll-indicator-dot');
  
  // 更新当前活跃的指示点
  function updateActiveDot() {
    const scrollPosition = window.scrollY + window.innerHeight / 2;
    
    sections.forEach((section, index) => {
      const rect = section.getBoundingClientRect();
      const sectionTop = rect.top + window.scrollY;
      const sectionBottom = sectionTop + rect.height;
      
      if (scrollPosition >= sectionTop && scrollPosition < sectionBottom) {
        // 移除所有活跃状态
        dots.forEach(dot => {
          const dotElement = dot.querySelector('div');
          dotElement.classList.remove('bg-blue-600', 'scale-150', 'shadow-layer-4');
          dotElement.classList.add('bg-slate-300/60');
          
          // 移除活跃装饰
          const decoration = dot.querySelector('.absolute.-top-1.-right-1');
          if (decoration) {
            decoration.classList.remove('opacity-100', 'scale-100');
            decoration.classList.add('opacity-0', 'scale-0');
          }
        });
        
        // 设置当前活跃状态
        if (dots[index]) {
          const activeDot = dots[index].querySelector('div');
          activeDot.classList.remove('bg-slate-300/60');
          activeDot.classList.add('bg-blue-600', 'scale-150', 'shadow-layer-4');
          
          // 激活装饰
          const activeDecoration = dots[index].querySelector('.absolute.-top-1.-right-1');
          if (activeDecoration) {
            activeDecoration.classList.remove('opacity-0', 'scale-0');
            activeDecoration.classList.add('opacity-100', 'scale-100');
          }
        }
      }
    });
  }
  
  // 点击指示点跳转
  dots.forEach((dot, index) => {
    dot.addEventListener('click', () => {
      if (sections[index]) {
        // 滚动到目标部分
        sections[index].scrollIntoView({ behavior: 'smooth' });
        
        // 点击后移除焦点，避免留下方框
        setTimeout(() => {
          dot.blur();
        }, 100);
        
        // 添加点击反馈动画
        dot.classList.add('scale-110');
        setTimeout(() => {
          dot.classList.remove('scale-110');
        }, 200);
      }
    });
  });
  
  // 监听滚动事件
  window.addEventListener('scroll', updateActiveDot);
  
  // 初始化
  updateActiveDot();
  
  // 新增：键盘导航支持
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Tab' && e.shiftKey) {
      // 当用户使用 Shift+Tab 时，确保指示器可见
      const indicator = document.querySelector('.scroll-indicator-dot');
      if (indicator) {
        indicator.classList.add('ring-2', 'ring-blue-500', 'ring-opacity-50');
        setTimeout(() => {
          indicator.classList.remove('ring-2', 'ring-blue-500', 'ring-opacity-50');
        }, 2000);
      }
    }
  });
</script>

<style>
  .scroll-indicator-dot {
    cursor: pointer;
    outline: none;
    border: none;
    background: none;
    padding: 0;
    margin: 0;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .scroll-indicator-dot:focus {
    outline: none;
  }
  
  .scroll-indicator-dot:focus-visible {
    outline: 2px solid theme('colors.blue.500');
    outline-offset: 4px;
    border-radius: 50%;
  }
  
  /* 移除点击后的默认样式 */
  .scroll-indicator-dot:active {
    transform: none;
  }
  
  .scroll-indicator-dot:focus:not(:focus-visible) {
    outline: none;
  }
  
  /* 增强的悬停效果 */
  .scroll-indicator-dot:hover {
    transform: translateX(-4px);
  }
  
  /* 活跃状态的动画 */
  .scroll-indicator-dot[data-active="true"] {
    animation: pulse-glow 2s infinite;
  }
  
  @keyframes pulse-glow {
    0%, 100% { 
      filter: drop-shadow(0 0 4px rgba(59, 130, 246, 0.3));
    }
    50% { 
      filter: drop-shadow(0 0 8px rgba(59, 130, 246, 0.6));
    }
  }
  
  /* 响应式调整 */
  @media (max-width: 1024px) {
    .scroll-indicator-dot {
      display: none;
    }
  }
  
  /* 滚动条样式优化 */
  .scroll-indicator-dot::-webkit-scrollbar {
    width: 4px;
  }
  
  .scroll-indicator-dot::-webkit-scrollbar-track {
    background: transparent;
  }
  
  .scroll-indicator-dot::-webkit-scrollbar-thumb {
    background: rgba(59, 130, 246, 0.3);
    border-radius: 2px;
  }
</style>
